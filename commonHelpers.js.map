{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nconst input = document.querySelector('#datetime-picker');\nconst start = document.querySelector('[data-start]');\nconst days = document.querySelector('[data-days]');\nconst hours = document.querySelector('[data-hours]');\nconst minutes = document.querySelector('[data-minutes]');\nconst seconds = document.querySelector('[data-seconds]');\nstart.disabled = true;\nlet userSelectedDate;\nlet intervalId = null;\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    console.log(selectedDates[0]);\n    if (selectedDates[0].getTime() < Date.now()) {\n      iziToast.show({\n        message: 'Please choose a date in the future',\n        messageColor: '#fff',\n        backgroundColor: '#EF4040',\n        position: 'topRight',\n      });\n      start.disabled = true;\n    } else {\n      start.disabled = false;\n    }\n    userSelectedDate = selectedDates[0];\n  },\n};\nflatpickr('#datetime-picker', options);\nstart.addEventListener('click', setTimer);\nfunction setTimer() {\n  start.disabled = true;\n  input.disabled = true;\n  intervalId = setInterval(() => {\n    let timeDifference;\n    timeDifference = userSelectedDate.getTime() - Date.now();\n    const objTime = convertMs(timeDifference);\n    days.innerHTML = addLeadingZero(objTime.days);\n    hours.innerHTML = addLeadingZero(objTime.hours);\n    minutes.innerHTML = addLeadingZero(objTime.minutes);\n    seconds.innerHTML = addLeadingZero(objTime.seconds);\n    if (timeDifference < 1000) {\n      clearInterval(intervalId);\n      input.disabled = false;\n    }\n  }, 1000);\n}\nfunction convertMs(ms) {\n\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n\n  const hours = Math.floor((ms % day) / hour);\n\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n  return { days, hours, minutes, seconds };\n}\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n\n\n"],"names":["input","start","days","hours","minutes","seconds","userSelectedDate","intervalId","options","selectedDates","iziToast","flatpickr","setTimer","timeDifference","objTime","convertMs","addLeadingZero","ms","value"],"mappings":"2GAIA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAO,SAAS,cAAc,aAAa,EAC3CC,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAU,SAAS,cAAc,gBAAgB,EACjDC,EAAU,SAAS,cAAc,gBAAgB,EACvDJ,EAAM,SAAW,GACjB,IAAIK,EACAC,EAAa,KACjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,QAAQ,IAAIA,EAAc,CAAC,CAAC,EACxBA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,OACpCC,EAAS,KAAK,CACZ,QAAS,qCACT,aAAc,OACd,gBAAiB,UACjB,SAAU,UAClB,CAAO,EACDT,EAAM,SAAW,IAEjBA,EAAM,SAAW,GAEnBK,EAAmBG,EAAc,CAAC,CACnC,CACH,EACAE,EAAU,mBAAoBH,CAAO,EACrCP,EAAM,iBAAiB,QAASW,CAAQ,EACxC,SAASA,GAAW,CAClBX,EAAM,SAAW,GACjBD,EAAM,SAAW,GACjBO,EAAa,YAAY,IAAM,CAC7B,IAAIM,EACJA,EAAiBP,EAAiB,QAAS,EAAG,KAAK,IAAG,EACtD,MAAMQ,EAAUC,EAAUF,CAAc,EACxCX,EAAK,UAAYc,EAAeF,EAAQ,IAAI,EAC5CX,EAAM,UAAYa,EAAeF,EAAQ,KAAK,EAC9CV,EAAQ,UAAYY,EAAeF,EAAQ,OAAO,EAClDT,EAAQ,UAAYW,EAAeF,EAAQ,OAAO,EAC9CD,EAAiB,MACnB,cAAcN,CAAU,EACxBP,EAAM,SAAW,GAEpB,EAAE,GAAI,CACT,CACA,SAASe,EAAUE,EAAI,CAOrB,MAAMf,EAAO,KAAK,MAAMe,EAAK,KAAG,EAE1Bd,EAAQ,KAAK,MAAOc,EAAK,MAAO,IAAI,EAEpCb,EAAU,KAAK,MAAQa,EAAK,MAAO,KAAQ,GAAM,EAEjDZ,EAAU,KAAK,MAASY,EAAK,MAAO,KAAQ,IAAU,GAAM,EAClE,MAAO,CAAE,KAAAf,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,SAASW,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}